"AWSTemplateFormatVersion" : "2010-09-09"

Description:  This template deploys a VPC, with a pair of public subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys Ec2, Keypair and Userdata script


Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
       - Key: Name
         Value: MyVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.0.0/18
      AvailabilityZone: "eu-west-1a"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: PublicSubnet1
   

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.64.0/18
      AvailabilityZone: "eu-west-1b"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: PublicSubnet2

  MyVPCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: MyVPCIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyVPCIGW

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  !Ref MyVPC
      Tags:
      - Key: Name
        Value: PublicRouteTable

  Route:
    Type: AWS::EC2::Route
    DependsOn: MyVPCIGW
    Properties:
       RouteTableId: !Ref PublicRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref MyVPCIGW

  PublicSubnetRouteTable1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnetRouteTable2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable


  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow application and ssh
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  ProjectApplicationInstance:
     Type: 'AWS::EC2::Instance'
     Properties: 
        ImageId: ami-04fe22dfadec6f0b6
        InstanceType: t2.micro
        SubnetId: !Ref PublicSubnet1
        KeyName: appmigro
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64:
            !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install git -y
            sudo git clone https://github.com/appmigro01/ProjectApplication.git
            cd ProjectApplication
            sudo git config --global --add safe.directory /home/ec2-user/ProjectApplication
            sudo git checkout origin/docker
            sudo yum install -y yum-utils
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            sudo yum install docker -y
            sudo systemctl start docker
            sudo docker build -t projectapplication .
            sudo docker run -p 8000:8000 projectapplication
  
